{"version":3,"sources":["Hoc/Layout/Layout.js","Components/Cockpit/Cockpit.js","Components/List/List.js","Containers/ToDo/ToDo.js","App.js","serviceWorker.js","index.js"],"names":["Layout","props","className","children","Cockpit","inputRef","React","createRef","inputFocus","current","focus","this","Fragment","type","placeholder","aria-label","aria-describedby","value","onChange","changed","onKeyUp","added","ref","id","onClick","Component","List","inputsRef","listItems","map","item","i","key","readOnly","edited","content","event","onFocus","focused","onBlur","el","push","deleted","listItemsRef","Todo","state","inputValue","inputChangedHandler","setState","target","addedHandler","listFocusHandler","index","listChangedHandler","listDeletedHandler","splice","App","ToDo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.96e79ee9.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst Layout = props => (\r\n    <Fragment>\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <span>ToDo React</span>\r\n        </nav>\r\n        <div className=\"container mt-5\">\r\n            <div className=\"row\">\r\n                <div className=\"mx-auto col-12 col-md-8\">\r\n                    {props.children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </Fragment>\r\n);\r\n\r\nexport default Layout;","import React, { Component } from 'react';\r\n\r\nclass Cockpit extends Component {\r\n\r\n    inputRef = React.createRef();\r\n\r\n    inputFocus = () => this.inputRef.current.focus();\r\n\r\n    componentDidMount() {\r\n        this.inputFocus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"input-group mb-5\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Tapez quelque chose...\"\r\n                        aria-label=\"\"\r\n                        aria-describedby=\"button-addon2\"\r\n                        value={this.props.value}\r\n                        onChange={this.props.changed}\r\n                        onKeyUp={this.props.added}\r\n                        ref={this.inputRef} />\r\n                    <div className=\"input-group-append\">\r\n                        <button \r\n                        className=\"btn btn-outline-secondary\" \r\n                        type=\"button\" \r\n                        id=\"button-addon2\"\r\n                        onClick={this.props.added}>Ajouter</button>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cockpit;","import React, { Component } from 'react';\r\n\r\nclass List extends Component {\r\n\r\n\r\n    inputsRef = [];\r\n\r\n    render() {\r\n        let listItems = null;\r\n\r\n        listItems = (\r\n            this.props.listItems.map((item, i) => {\r\n                return (\r\n                    <div\r\n                        key={i}\r\n                        className=\"form-group row\">\r\n\r\n                        <div className=\"input-group col\">\r\n                            <input\r\n                                type=\"text\"\r\n                                readOnly={item.edited ? false : true}\r\n                                className={item.edited ? \"form-control\" : \"form-control-plaintext\"}\r\n                                value={item.content}\r\n                                onChange={(event) => this.props.changed(event, i)}\r\n                                onFocus={(event) => this.props.focused(event, i, true)}\r\n                                onBlur={(event) => this.props.focused(event, i, false)}\r\n                                onKeyUp={(event) => this.props.focused(event, i, false)}\r\n                                ref={el => this.inputsRef.push(el)}\r\n                            />\r\n                            <button\r\n                                className=\"btn btn-outline-success\"\r\n                                onClick={() => this.inputsRef[i].focus()} >\r\n                                {item.edited ? \"Valider\" : \"Editer\"}\r\n                            </button>\r\n                            {item.edited ? null :\r\n                                <button\r\n                                    className=\"btn btn-outline-danger ml-2\"\r\n                                    onClick={(event) => this.props.deleted(event, i)}>Supprimer</button>\r\n\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )\r\n\r\n            })\r\n        );\r\n        return (\r\n            <div ref={this.listItemsRef}>\r\n                {listItems}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default List;","import React, { Component } from 'react';\r\n\r\nimport Cockpit from '../../Components/Cockpit/Cockpit';\r\nimport List from '../../Components/List/List';\r\n\r\n\r\nclass Todo extends Component {\r\n\r\n    state = {\r\n        inputValue: '',\r\n        listItems: [\r\n            {\r\n                content: 'Ligne 1',\r\n                edited: false\r\n            },\r\n            {\r\n                content: 'Ligne 2',\r\n                edited: false\r\n            }\r\n        ]\r\n    }\r\n\r\n    inputChangedHandler = (event) => {\r\n        this.setState({ inputValue: event.target.value })\r\n    }\r\n\r\n    addedHandler = (event) => {\r\n        const inputValue = this.state.inputValue;\r\n        const listItems = [...this.state.listItems];\r\n\r\n        if (event.type === 'keyup' && event.key !== 'Enter') return;\r\n\r\n        if (inputValue) {\r\n            listItems.push({ content: inputValue });\r\n            this.setState({ inputValue: '', listItems: listItems });\r\n        }\r\n    }\r\n\r\n    listFocusHandler = (event, index, focus) => {\r\n        const listItems = [...this.state.listItems];\r\n\r\n        if (event.type === 'keyup' && event.key !== 'Enter') return;\r\n\r\n        if (focus) {\r\n            listItems[index].edited = true;\r\n        } else {\r\n            listItems[index].edited = false;\r\n        }\r\n\r\n        this.setState({ listItems: listItems });\r\n    }\r\n\r\n    listChangedHandler = (event, index) => {\r\n        const listItems = [...this.state.listItems];\r\n        listItems[index].content = event.target.value;\r\n        this.setState({ listItems: listItems });\r\n    }\r\n\r\n    listDeletedHandler = (event, index) => {\r\n        const listItems = [...this.state.listItems];\r\n        if (listItems[index]) {\r\n            listItems.splice(index, 1);\r\n        }\r\n        this.setState({ listItems: listItems });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Cockpit value={this.state.inputValue} changed={this.inputChangedHandler} added={this.addedHandler} />\r\n                <List listItems={this.state.listItems} focused={this.listFocusHandler} changed={this.listChangedHandler} deleted={this.listDeletedHandler} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Layout from './Hoc/Layout/Layout';\r\nimport ToDo from './Containers/ToDo/ToDo';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Layout>\r\n        <ToDo />\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}